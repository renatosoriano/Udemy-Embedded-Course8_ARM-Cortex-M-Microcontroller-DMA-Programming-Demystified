/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f446xx.h"

//function prototypes of the init & configuration functions
void button_init(void);
void uart2_init(void);
void dma1_init(void);


#define BASE_ADDR_OF_GPIOC_PERI  GPIOC
int main(void)
{
	button_init();
	uart2_init();
	dma1_init();
	while(1);

	return 0;
}
void button_init(void)
{
	//button is connected to PC13 . GPIOC pin number 13. 
	
	GPIO_TypeDef *pGPIOC;
	pGPIOC = BASE_ADDR_OF_GPIOC_PERI;
	
	RCC_TypeDef *pRCC;
	pRCC = RCC;
	
	EXTI_TypeDef *pEXTI;
	pEXTI = EXTI;
	
	SYSCFG_TypeDef *pSYSCFG;
	pSYSCFG = SYSCFG;
	
	//1. enable the peripheral clock for the GPIOC peripheral 
	pRCC->AHB1ENR |= ( 1 << 2);
	
	//2. Keep the gpio pin in input mode
	pGPIOC->MODER &= ~( 0x3 << 26) ;
	
	//3. Enable the interrupt over that gpio pin
	pEXTI->IMR |= (1 << 13);
	
	//4. Enable the clock for SYSCFG 
	pRCC->APB2ENR |= ( 1 << 14);
	
	//5. Configuring the SYSCFG CR4 register 
	pSYSCFG->EXTICR[3] &= ~(0xF << 4); //Clearing 
	pSYSCFG->EXTICR[3] |=  (0x2 << 4); //set
	
	//6. Configure the edge detection for the EXTI 13 line. 
	pEXTI->FTSR |= ( 1 << 13);

	//7. Enable the IRQ related to that gpio pin in NVIC register of the processor . 
	NVIC_EnableIRQ(EXTI15_10_IRQn);
	
}
void uart2_init(void)
{
}
void dma1_init(void)
{
}
