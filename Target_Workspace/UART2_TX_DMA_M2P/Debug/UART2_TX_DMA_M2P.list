
UART2_TX_DMA_M2P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002cb4  08002cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd4  08002cd4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cdc  08002cdc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ce0  08002ce0  00012ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000001c  08002d00  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002d00  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d29  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001887  00000000  00000000  00028db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  0002a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000587  00000000  00000000  0002ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020354  00000000  00000000  0002b2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009760  00000000  00000000  0004b653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4b23  00000000  00000000  00054db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c80  00000000  00000000  001198d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  0011b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c9c 	.word	0x08002c9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08002c9c 	.word	0x08002c9c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa6e 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f808 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8be 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 f89c 	bl	800064c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f870 	bl	80005f8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x18>
	...

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	2234      	movs	r2, #52	; 0x34
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fb8a 	bl	8002c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <SystemClock_Config+0xd4>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a29      	ldr	r2, [pc, #164]	; (80005f0 <SystemClock_Config+0xd4>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <SystemClock_Config+0xd4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800055c:	2300      	movs	r3, #0
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <SystemClock_Config+0xd8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <SystemClock_Config+0xd8>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <SystemClock_Config+0xd8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000590:	2310      	movs	r3, #16
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800059a:	2304      	movs	r3, #4
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fc2a 	bl	8001e04 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005b6:	f000 f8df 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2102      	movs	r1, #2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 f8ca 	bl	8001770 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005e2:	f000 f8c9 	bl	8000778 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_USART2_UART_Init+0x50>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000630:	f001 fe86 	bl	8002340 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063a:	f000 f89d 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000038 	.word	0x20000038
 8000648:	40004400 	.word	0x40004400

0800064c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_DMA_Init+0x3c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <MX_DMA_Init+0x3c>)
 800065c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_DMA_Init+0x3c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	2011      	movs	r0, #17
 8000674:	f000 fb03 	bl	8000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000678:	2011      	movs	r0, #17
 800067a:	f000 fb1c 	bl	8000cb6 <HAL_NVIC_EnableIRQ>

}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <MX_GPIO_Init+0xe0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a30      	ldr	r2, [pc, #192]	; (800076c <MX_GPIO_Init+0xe0>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MX_GPIO_Init+0xe0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <MX_GPIO_Init+0xe0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a29      	ldr	r2, [pc, #164]	; (800076c <MX_GPIO_Init+0xe0>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_GPIO_Init+0xe0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_GPIO_Init+0xe0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a22      	ldr	r2, [pc, #136]	; (800076c <MX_GPIO_Init+0xe0>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_GPIO_Init+0xe0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_GPIO_Init+0xe0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <MX_GPIO_Init+0xe0>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_GPIO_Init+0xe0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	4816      	ldr	r0, [pc, #88]	; (8000770 <MX_GPIO_Init+0xe4>)
 8000718:	f000 ffec 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800071c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000722:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4810      	ldr	r0, [pc, #64]	; (8000774 <MX_GPIO_Init+0xe8>)
 8000734:	f000 fe4a 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000738:	2320      	movs	r3, #32
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4808      	ldr	r0, [pc, #32]	; (8000770 <MX_GPIO_Init+0xe4>)
 8000750:	f000 fe3c 	bl	80013cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2028      	movs	r0, #40	; 0x28
 800075a:	f000 fa90 	bl	8000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f000 faa9 	bl	8000cb6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020000 	.word	0x40020000
 8000774:	40020800 	.word	0x40020800

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <HAL_MspInit+0x4c>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <HAL_MspInit+0x4c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007c2:	2007      	movs	r0, #7
 80007c4:	f000 fa50 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <HAL_UART_MspInit+0xf0>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d162      	bne.n	80008bc <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <HAL_UART_MspInit+0xf4>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <HAL_UART_MspInit+0xf4>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <HAL_UART_MspInit+0xf4>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <HAL_UART_MspInit+0xf4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <HAL_UART_MspInit+0xf4>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <HAL_UART_MspInit+0xf4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082e:	230c      	movs	r3, #12
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083e:	2307      	movs	r3, #7
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4820      	ldr	r0, [pc, #128]	; (80008cc <HAL_UART_MspInit+0xf8>)
 800084a:	f000 fdbf 	bl	80013cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 8000850:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <HAL_UART_MspInit+0x100>)
 8000852:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 8000856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800085a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 800085e:	2240      	movs	r2, #64	; 0x40
 8000860:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 800088a:	2204      	movs	r2, #4
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 8000890:	2203      	movs	r2, #3
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 80008a2:	f000 fa23 	bl	8000cec <HAL_DMA_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 80008ac:	f7ff ff64 	bl	8000778 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
 80008b6:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_UART_MspInit+0xfc>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40004400 	.word	0x40004400
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	20000080 	.word	0x20000080
 80008d4:	400260a0 	.word	0x400260a0

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 f8b0 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <DMA1_Stream6_IRQHandler+0x10>)
 8000932:	f000 fae1 	bl	8000ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000080 	.word	0x20000080

08000940 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  //Here we will send UART2_TX  request to DMA1 controller
  HAL_UART_Transmit_DMA(&huart2, data_stream, (uint16_t)data_len);
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <EXTI15_10_IRQHandler+0x20>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	b29b      	uxth	r3, r3
 800094a:	461a      	mov	r2, r3
 800094c:	4905      	ldr	r1, [pc, #20]	; (8000964 <EXTI15_10_IRQHandler+0x24>)
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <EXTI15_10_IRQHandler+0x28>)
 8000950:	f001 fd46 	bl	80023e0 <HAL_UART_Transmit_DMA>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000954:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000958:	f000 fee6 	bl	8001728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000000c 	.word	0x2000000c
 8000964:	20000000 	.word	0x20000000
 8000968:	20000038 	.word	0x20000038

0800096c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <SystemInit+0x20>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <SystemInit+0x20>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000994:	f7ff ffea 	bl	800096c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	; (80009dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009be:	f002 f949 	bl	8002c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c2:	f7ff fd9d 	bl	8000500 <main>
  bx  lr    
 80009c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80009d4:	08002ce4 	.word	0x08002ce4
  ldr r2, =_sbss
 80009d8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80009dc:	200000e4 	.word	0x200000e4

080009e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC_IRQHandler>
	...

080009e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <HAL_Init+0x40>)
 80009ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_Init+0x40>)
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_Init+0x40>)
 8000a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f92b 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f000 f808 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff feb4 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023c00 	.word	0x40023c00

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f943 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	f000 f90b 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000010 	.word	0x20000010
 8000a80:	20000018 	.word	0x20000018
 8000a84:	20000014 	.word	0x20000014

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000018 	.word	0x20000018
 8000aac:	200000e0 	.word	0x200000e0

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200000e0 	.word	0x200000e0

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db0b      	blt.n	8000b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f003 021f 	and.w	r2, r3, #31
 8000b44:	4907      	ldr	r1, [pc, #28]	; (8000b64 <__NVIC_EnableIRQ+0x38>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff29 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff3e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff31 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f7ff feda 	bl	8000ab0 <HAL_GetTick>
 8000cfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e099      	b.n	8000e3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d28:	e00f      	b.n	8000d4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d2a:	f7ff fec1 	bl	8000ab0 <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d908      	bls.n	8000d4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2203      	movs	r2, #3
 8000d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e078      	b.n	8000e3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e8      	bne.n	8000d2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <HAL_DMA_Init+0x158>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d107      	bne.n	8000db4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4313      	orrs	r3, r2
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f023 0307 	bic.w	r3, r3, #7
 8000dca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d117      	bne.n	8000e0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00e      	beq.n	8000e0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 fa6f 	bl	80012d4 <DMA_CheckFifoParam>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d008      	beq.n	8000e0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2240      	movs	r2, #64	; 0x40
 8000e00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e016      	b.n	8000e3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 fa26 	bl	8001268 <DMA_CalcBaseAndBitshift>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e24:	223f      	movs	r2, #63	; 0x3f
 8000e26:	409a      	lsls	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	f010803f 	.word	0xf010803f

08000e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_DMA_Start_IT+0x26>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e040      	b.n	8000ef0 <HAL_DMA_Start_IT+0xa8>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d12f      	bne.n	8000ee2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2202      	movs	r2, #2
 8000e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f000 f9b8 	bl	800120c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea0:	223f      	movs	r2, #63	; 0x3f
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0216 	orr.w	r2, r2, #22
 8000eb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d007      	beq.n	8000ed0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0208 	orr.w	r2, r2, #8
 8000ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e005      	b.n	8000eee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000eea:	2302      	movs	r3, #2
 8000eec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f04:	4b8e      	ldr	r3, [pc, #568]	; (8001140 <HAL_DMA_IRQHandler+0x248>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a8e      	ldr	r2, [pc, #568]	; (8001144 <HAL_DMA_IRQHandler+0x24c>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0a9b      	lsrs	r3, r3, #10
 8000f10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f22:	2208      	movs	r2, #8
 8000f24:	409a      	lsls	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d01a      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d013      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0204 	bic.w	r2, r2, #4
 8000f4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f50:	2208      	movs	r2, #8
 8000f52:	409a      	lsls	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f5c:	f043 0201 	orr.w	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f68:	2201      	movs	r2, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d012      	beq.n	8000f9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f86:	2201      	movs	r2, #1
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f92:	f043 0202 	orr.w	r2, r3, #2
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d012      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00b      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc8:	f043 0204 	orr.w	r2, r3, #4
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d043      	beq.n	8001068 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d03c      	beq.n	8001068 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d018      	beq.n	800103a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d108      	bne.n	8001028 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	2b00      	cmp	r3, #0
 800101c:	d024      	beq.n	8001068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	4798      	blx	r3
 8001026:	e01f      	b.n	8001068 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102c:	2b00      	cmp	r3, #0
 800102e:	d01b      	beq.n	8001068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	4798      	blx	r3
 8001038:	e016      	b.n	8001068 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001044:	2b00      	cmp	r3, #0
 8001046:	d107      	bne.n	8001058 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0208 	bic.w	r2, r2, #8
 8001056:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106c:	2220      	movs	r2, #32
 800106e:	409a      	lsls	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 808f 	beq.w	8001198 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 8087 	beq.w	8001198 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108e:	2220      	movs	r2, #32
 8001090:	409a      	lsls	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d136      	bne.n	8001110 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0216 	bic.w	r2, r2, #22
 80010b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d103      	bne.n	80010d2 <HAL_DMA_IRQHandler+0x1da>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d007      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0208 	bic.w	r2, r2, #8
 80010e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e6:	223f      	movs	r2, #63	; 0x3f
 80010e8:	409a      	lsls	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001102:	2b00      	cmp	r3, #0
 8001104:	d07e      	beq.n	8001204 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	4798      	blx	r3
        }
        return;
 800110e:	e079      	b.n	8001204 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d01d      	beq.n	800115a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10d      	bne.n	8001148 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	2b00      	cmp	r3, #0
 8001132:	d031      	beq.n	8001198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
 800113c:	e02c      	b.n	8001198 <HAL_DMA_IRQHandler+0x2a0>
 800113e:	bf00      	nop
 8001140:	20000010 	.word	0x20000010
 8001144:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d023      	beq.n	8001198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
 8001158:	e01e      	b.n	8001198 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10f      	bne.n	8001188 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0210 	bic.w	r2, r2, #16
 8001176:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119c:	2b00      	cmp	r3, #0
 800119e:	d032      	beq.n	8001206 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d022      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2205      	movs	r2, #5
 80011b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0201 	bic.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d307      	bcc.n	80011e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f2      	bne.n	80011c4 <HAL_DMA_IRQHandler+0x2cc>
 80011de:	e000      	b.n	80011e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80011e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	4798      	blx	r3
 8001202:	e000      	b.n	8001206 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001204:	bf00      	nop
    }
  }
}
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001228:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b40      	cmp	r3, #64	; 0x40
 8001238:	d108      	bne.n	800124c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800124a:	e007      	b.n	800125c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	60da      	str	r2, [r3, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3b10      	subs	r3, #16
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <DMA_CalcBaseAndBitshift+0x64>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d909      	bls.n	80012aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800129e:	f023 0303 	bic.w	r3, r3, #3
 80012a2:	1d1a      	adds	r2, r3, #4
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	659a      	str	r2, [r3, #88]	; 0x58
 80012a8:	e007      	b.n	80012ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012b2:	f023 0303 	bic.w	r3, r3, #3
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	aaaaaaab 	.word	0xaaaaaaab
 80012d0:	08002ccc 	.word	0x08002ccc

080012d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11f      	bne.n	800132e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d856      	bhi.n	80013a2 <DMA_CheckFifoParam+0xce>
 80012f4:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <DMA_CheckFifoParam+0x28>)
 80012f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fa:	bf00      	nop
 80012fc:	0800130d 	.word	0x0800130d
 8001300:	0800131f 	.word	0x0800131f
 8001304:	0800130d 	.word	0x0800130d
 8001308:	080013a3 	.word	0x080013a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d046      	beq.n	80013a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800131c:	e043      	b.n	80013a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001326:	d140      	bne.n	80013aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800132c:	e03d      	b.n	80013aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001336:	d121      	bne.n	800137c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d837      	bhi.n	80013ae <DMA_CheckFifoParam+0xda>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <DMA_CheckFifoParam+0x70>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	08001355 	.word	0x08001355
 8001348:	0800135b 	.word	0x0800135b
 800134c:	08001355 	.word	0x08001355
 8001350:	0800136d 	.word	0x0800136d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
      break;
 8001358:	e030      	b.n	80013bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d025      	beq.n	80013b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800136a:	e022      	b.n	80013b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001374:	d11f      	bne.n	80013b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800137a:	e01c      	b.n	80013b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d903      	bls.n	800138a <DMA_CheckFifoParam+0xb6>
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b03      	cmp	r3, #3
 8001386:	d003      	beq.n	8001390 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001388:	e018      	b.n	80013bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
      break;
 800138e:	e015      	b.n	80013bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00e      	beq.n	80013ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
      break;
 80013a0:	e00b      	b.n	80013ba <DMA_CheckFifoParam+0xe6>
      break;
 80013a2:	bf00      	nop
 80013a4:	e00a      	b.n	80013bc <DMA_CheckFifoParam+0xe8>
      break;
 80013a6:	bf00      	nop
 80013a8:	e008      	b.n	80013bc <DMA_CheckFifoParam+0xe8>
      break;
 80013aa:	bf00      	nop
 80013ac:	e006      	b.n	80013bc <DMA_CheckFifoParam+0xe8>
      break;
 80013ae:	bf00      	nop
 80013b0:	e004      	b.n	80013bc <DMA_CheckFifoParam+0xe8>
      break;
 80013b2:	bf00      	nop
 80013b4:	e002      	b.n	80013bc <DMA_CheckFifoParam+0xe8>
      break;   
 80013b6:	bf00      	nop
 80013b8:	e000      	b.n	80013bc <DMA_CheckFifoParam+0xe8>
      break;
 80013ba:	bf00      	nop
    }
  } 
  
  return status; 
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e165      	b.n	80016b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8154 	bne.w	80016ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	2b02      	cmp	r3, #2
 800141c:	d130      	bne.n	8001480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80ae 	beq.w	80016ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_GPIO_Init+0x300>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a5c      	ldr	r2, [pc, #368]	; (80016cc <HAL_GPIO_Init+0x300>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b5a      	ldr	r3, [pc, #360]	; (80016cc <HAL_GPIO_Init+0x300>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4f      	ldr	r2, [pc, #316]	; (80016d4 <HAL_GPIO_Init+0x308>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d025      	beq.n	80015e6 <HAL_GPIO_Init+0x21a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4e      	ldr	r2, [pc, #312]	; (80016d8 <HAL_GPIO_Init+0x30c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01f      	beq.n	80015e2 <HAL_GPIO_Init+0x216>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4d      	ldr	r2, [pc, #308]	; (80016dc <HAL_GPIO_Init+0x310>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d019      	beq.n	80015de <HAL_GPIO_Init+0x212>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4c      	ldr	r2, [pc, #304]	; (80016e0 <HAL_GPIO_Init+0x314>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4b      	ldr	r2, [pc, #300]	; (80016e4 <HAL_GPIO_Init+0x318>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x20a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <HAL_GPIO_Init+0x31c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x206>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a49      	ldr	r2, [pc, #292]	; (80016ec <HAL_GPIO_Init+0x320>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x202>
 80015ca:	2306      	movs	r3, #6
 80015cc:	e00c      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015ce:	2307      	movs	r3, #7
 80015d0:	e00a      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015d2:	2305      	movs	r3, #5
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015e6:	2300      	movs	r3, #0
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f002 0203 	and.w	r2, r2, #3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	; (80016d0 <HAL_GPIO_Init+0x304>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001606:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162a:	4a31      	ldr	r2, [pc, #196]	; (80016f0 <HAL_GPIO_Init+0x324>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001654:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_GPIO_Init+0x324>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a8:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_GPIO_Init+0x324>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	f67f ae96 	bls.w	80013e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40021400 	.word	0x40021400
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40013c00 	.word	0x40013c00

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001710:	e003      	b.n	800171a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d006      	beq.n	800174c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f806 	bl	8001758 <HAL_GPIO_EXTI_Callback>
  }
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40013c00 	.word	0x40013c00

08001758 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0cc      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001784:	4b68      	ldr	r3, [pc, #416]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d90c      	bls.n	80017ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b65      	ldr	r3, [pc, #404]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b63      	ldr	r3, [pc, #396]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0b8      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a58      	ldr	r2, [pc, #352]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	494d      	ldr	r1, [pc, #308]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d044      	beq.n	8001890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d119      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e07f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d003      	beq.n	800182e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	2b03      	cmp	r3, #3
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	4b3b      	ldr	r3, [pc, #236]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e067      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f023 0203 	bic.w	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4934      	ldr	r1, [pc, #208]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001860:	f7ff f926 	bl	8000ab0 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	e00a      	b.n	800187e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001868:	f7ff f922 	bl	8000ab0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e04f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 020c 	and.w	r2, r3, #12
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	429a      	cmp	r2, r3
 800188e:	d1eb      	bne.n	8001868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d20c      	bcs.n	80018b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e032      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	490e      	ldr	r1, [pc, #56]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f6:	f000 f855 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 80018fa:	4602      	mov	r2, r0
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	490a      	ldr	r1, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	5ccb      	ldrb	r3, [r1, r3]
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f886 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00
 800192c:	40023800 	.word	0x40023800
 8001930:	08002cb4 	.word	0x08002cb4
 8001934:	20000010 	.word	0x20000010
 8001938:	20000014 	.word	0x20000014

0800193c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_RCC_GetHCLKFreq+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000010 	.word	0x20000010

08001954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001958:	f7ff fff0 	bl	800193c <HAL_RCC_GetHCLKFreq>
 800195c:	4602      	mov	r2, r0
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0a9b      	lsrs	r3, r3, #10
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	4903      	ldr	r1, [pc, #12]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800196a:	5ccb      	ldrb	r3, [r1, r3]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	08002cc4 	.word	0x08002cc4

0800197c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001980:	f7ff ffdc 	bl	800193c <HAL_RCC_GetHCLKFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0b5b      	lsrs	r3, r3, #13
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4903      	ldr	r1, [pc, #12]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	08002cc4 	.word	0x08002cc4

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b0ae      	sub	sp, #184	; 0xb8
 80019aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ca:	4bcb      	ldr	r3, [pc, #812]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	f200 8206 	bhi.w	8001de4 <HAL_RCC_GetSysClockFreq+0x440>
 80019d8:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019de:	bf00      	nop
 80019e0:	08001a15 	.word	0x08001a15
 80019e4:	08001de5 	.word	0x08001de5
 80019e8:	08001de5 	.word	0x08001de5
 80019ec:	08001de5 	.word	0x08001de5
 80019f0:	08001a1d 	.word	0x08001a1d
 80019f4:	08001de5 	.word	0x08001de5
 80019f8:	08001de5 	.word	0x08001de5
 80019fc:	08001de5 	.word	0x08001de5
 8001a00:	08001a25 	.word	0x08001a25
 8001a04:	08001de5 	.word	0x08001de5
 8001a08:	08001de5 	.word	0x08001de5
 8001a0c:	08001de5 	.word	0x08001de5
 8001a10:	08001c15 	.word	0x08001c15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a14:	4bb9      	ldr	r3, [pc, #740]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x358>)
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001a1a:	e1e7      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a1c:	4bb8      	ldr	r3, [pc, #736]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a22:	e1e3      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a24:	4bb4      	ldr	r3, [pc, #720]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a30:	4bb1      	ldr	r3, [pc, #708]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d071      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3c:	4bae      	ldr	r3, [pc, #696]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	2200      	movs	r2, #0
 8001a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a48:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a62:	4622      	mov	r2, r4
 8001a64:	462b      	mov	r3, r5
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0159      	lsls	r1, r3, #5
 8001a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a74:	0150      	lsls	r0, r2, #5
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	1a51      	subs	r1, r2, r1
 8001a7e:	6439      	str	r1, [r7, #64]	; 0x40
 8001a80:	4629      	mov	r1, r5
 8001a82:	eb63 0301 	sbc.w	r3, r3, r1
 8001a86:	647b      	str	r3, [r7, #68]	; 0x44
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a94:	4649      	mov	r1, r9
 8001a96:	018b      	lsls	r3, r1, #6
 8001a98:	4641      	mov	r1, r8
 8001a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a9e:	4641      	mov	r1, r8
 8001aa0:	018a      	lsls	r2, r1, #6
 8001aa2:	4641      	mov	r1, r8
 8001aa4:	1a51      	subs	r1, r2, r1
 8001aa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001abc:	4649      	mov	r1, r9
 8001abe:	00cb      	lsls	r3, r1, #3
 8001ac0:	4641      	mov	r1, r8
 8001ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ac6:	4641      	mov	r1, r8
 8001ac8:	00ca      	lsls	r2, r1, #3
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	189b      	adds	r3, r3, r2
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	460a      	mov	r2, r1
 8001ada:	eb42 0303 	adc.w	r3, r2, r3
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aec:	4629      	mov	r1, r5
 8001aee:	024b      	lsls	r3, r1, #9
 8001af0:	4621      	mov	r1, r4
 8001af2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001af6:	4621      	mov	r1, r4
 8001af8:	024a      	lsls	r2, r1, #9
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b02:	2200      	movs	r2, #0
 8001b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b10:	f7fe fb78 	bl	8000204 <__aeabi_uldivmod>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b1e:	e067      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b20:	4b75      	ldr	r3, [pc, #468]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	099b      	lsrs	r3, r3, #6
 8001b26:	2200      	movs	r2, #0
 8001b28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b2c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b38:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b42:	4622      	mov	r2, r4
 8001b44:	462b      	mov	r3, r5
 8001b46:	f04f 0000 	mov.w	r0, #0
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	0159      	lsls	r1, r3, #5
 8001b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b54:	0150      	lsls	r0, r2, #5
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	1a51      	subs	r1, r2, r1
 8001b5e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b60:	4629      	mov	r1, r5
 8001b62:	eb63 0301 	sbc.w	r3, r3, r1
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b74:	4649      	mov	r1, r9
 8001b76:	018b      	lsls	r3, r1, #6
 8001b78:	4641      	mov	r1, r8
 8001b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b7e:	4641      	mov	r1, r8
 8001b80:	018a      	lsls	r2, r1, #6
 8001b82:	4641      	mov	r1, r8
 8001b84:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b88:	4649      	mov	r1, r9
 8001b8a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ba2:	4692      	mov	sl, r2
 8001ba4:	469b      	mov	fp, r3
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	eb1a 0303 	adds.w	r3, sl, r3
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	462b      	mov	r3, r5
 8001bb0:	eb4b 0303 	adc.w	r3, fp, r3
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	028b      	lsls	r3, r1, #10
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bcc:	4621      	mov	r1, r4
 8001bce:	028a      	lsls	r2, r1, #10
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bd8:	2200      	movs	r2, #0
 8001bda:	673b      	str	r3, [r7, #112]	; 0x70
 8001bdc:	677a      	str	r2, [r7, #116]	; 0x74
 8001bde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001be2:	f7fe fb0f 	bl	8000204 <__aeabi_uldivmod>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4613      	mov	r3, r2
 8001bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf0:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c12:	e0eb      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c14:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c20:	4b35      	ldr	r3, [pc, #212]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d06b      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2c:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	2200      	movs	r2, #0
 8001c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8001c40:	2300      	movs	r3, #0
 8001c42:	667b      	str	r3, [r7, #100]	; 0x64
 8001c44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c48:	4622      	mov	r2, r4
 8001c4a:	462b      	mov	r3, r5
 8001c4c:	f04f 0000 	mov.w	r0, #0
 8001c50:	f04f 0100 	mov.w	r1, #0
 8001c54:	0159      	lsls	r1, r3, #5
 8001c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c5a:	0150      	lsls	r0, r2, #5
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4621      	mov	r1, r4
 8001c62:	1a51      	subs	r1, r2, r1
 8001c64:	61b9      	str	r1, [r7, #24]
 8001c66:	4629      	mov	r1, r5
 8001c68:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c7a:	4659      	mov	r1, fp
 8001c7c:	018b      	lsls	r3, r1, #6
 8001c7e:	4651      	mov	r1, sl
 8001c80:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c84:	4651      	mov	r1, sl
 8001c86:	018a      	lsls	r2, r1, #6
 8001c88:	4651      	mov	r1, sl
 8001c8a:	ebb2 0801 	subs.w	r8, r2, r1
 8001c8e:	4659      	mov	r1, fp
 8001c90:	eb63 0901 	sbc.w	r9, r3, r1
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ca0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ca8:	4690      	mov	r8, r2
 8001caa:	4699      	mov	r9, r3
 8001cac:	4623      	mov	r3, r4
 8001cae:	eb18 0303 	adds.w	r3, r8, r3
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	462b      	mov	r3, r5
 8001cb6:	eb49 0303 	adc.w	r3, r9, r3
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001cc8:	4629      	mov	r1, r5
 8001cca:	024b      	lsls	r3, r1, #9
 8001ccc:	4621      	mov	r1, r4
 8001cce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	024a      	lsls	r2, r1, #9
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cde:	2200      	movs	r2, #0
 8001ce0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ce2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ce4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ce8:	f7fe fa8c 	bl	8000204 <__aeabi_uldivmod>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cf6:	e065      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x420>
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	00f42400 	.word	0x00f42400
 8001d00:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d04:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x458>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4611      	mov	r1, r2
 8001d10:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d14:	653b      	str	r3, [r7, #80]	; 0x50
 8001d16:	2300      	movs	r3, #0
 8001d18:	657b      	str	r3, [r7, #84]	; 0x54
 8001d1a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001d1e:	4642      	mov	r2, r8
 8001d20:	464b      	mov	r3, r9
 8001d22:	f04f 0000 	mov.w	r0, #0
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	0159      	lsls	r1, r3, #5
 8001d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d30:	0150      	lsls	r0, r2, #5
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4641      	mov	r1, r8
 8001d38:	1a51      	subs	r1, r2, r1
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d50:	4659      	mov	r1, fp
 8001d52:	018b      	lsls	r3, r1, #6
 8001d54:	4651      	mov	r1, sl
 8001d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5a:	4651      	mov	r1, sl
 8001d5c:	018a      	lsls	r2, r1, #6
 8001d5e:	4651      	mov	r1, sl
 8001d60:	1a54      	subs	r4, r2, r1
 8001d62:	4659      	mov	r1, fp
 8001d64:	eb63 0501 	sbc.w	r5, r3, r1
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	00eb      	lsls	r3, r5, #3
 8001d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d76:	00e2      	lsls	r2, r4, #3
 8001d78:	4614      	mov	r4, r2
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	4643      	mov	r3, r8
 8001d7e:	18e3      	adds	r3, r4, r3
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	464b      	mov	r3, r9
 8001d84:	eb45 0303 	adc.w	r3, r5, r3
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d96:	4629      	mov	r1, r5
 8001d98:	028b      	lsls	r3, r1, #10
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da0:	4621      	mov	r1, r4
 8001da2:	028a      	lsls	r2, r1, #10
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dac:	2200      	movs	r2, #0
 8001dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8001db0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001db2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001db6:	f7fe fa25 	bl	8000204 <__aeabi_uldivmod>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x458>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	0f1b      	lsrs	r3, r3, #28
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001dd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001de2:	e003      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	37b8      	adds	r7, #184	; 0xb8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	00f42400 	.word	0x00f42400

08001e04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e28d      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8083 	beq.w	8001f2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e24:	4b94      	ldr	r3, [pc, #592]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d019      	beq.n	8001e64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e30:	4b91      	ldr	r3, [pc, #580]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e3c:	4b8e      	ldr	r3, [pc, #568]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e48:	d00c      	beq.n	8001e64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d112      	bne.n	8001e7c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e56:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e62:	d10b      	bne.n	8001e7c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	4b84      	ldr	r3, [pc, #528]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d05b      	beq.n	8001f28 <HAL_RCC_OscConfig+0x124>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d157      	bne.n	8001f28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e25a      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	d106      	bne.n	8001e94 <HAL_RCC_OscConfig+0x90>
 8001e86:	4b7c      	ldr	r3, [pc, #496]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a7b      	ldr	r2, [pc, #492]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xcc>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xb4>
 8001e9e:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a75      	ldr	r2, [pc, #468]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b73      	ldr	r3, [pc, #460]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a72      	ldr	r2, [pc, #456]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xcc>
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6e      	ldr	r2, [pc, #440]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b6c      	ldr	r3, [pc, #432]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a6b      	ldr	r2, [pc, #428]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fdea 	bl	8000ab0 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7fe fde6 	bl	8000ab0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e21f      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b61      	ldr	r3, [pc, #388]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xdc>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7fe fdd6 	bl	8000ab0 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f08:	f7fe fdd2 	bl	8000ab0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e20b      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b57      	ldr	r3, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x104>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d06f      	beq.n	8002016 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f36:	4b50      	ldr	r3, [pc, #320]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d017      	beq.n	8001f72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f42:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d105      	bne.n	8001f5a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f4e:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d11c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f66:	4b44      	ldr	r3, [pc, #272]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d116      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	4b41      	ldr	r3, [pc, #260]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x186>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e1d3      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4937      	ldr	r1, [pc, #220]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	e03a      	b.n	8002016 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa8:	4b34      	ldr	r3, [pc, #208]	; (800207c <HAL_RCC_OscConfig+0x278>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7fe fd7f 	bl	8000ab0 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb6:	f7fe fd7b 	bl	8000ab0 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e1b4      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4b28      	ldr	r3, [pc, #160]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4925      	ldr	r1, [pc, #148]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <HAL_RCC_OscConfig+0x278>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fd5e 	bl	8000ab0 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7fe fd5a 	bl	8000ab0 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e193      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d036      	beq.n	8002090 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_RCC_OscConfig+0x27c>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7fe fd3e 	bl	8000ab0 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002038:	f7fe fd3a 	bl	8000ab0 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e173      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_OscConfig+0x274>)
 800204c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x234>
 8002056:	e01b      	b.n	8002090 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_OscConfig+0x27c>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7fe fd27 	bl	8000ab0 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002064:	e00e      	b.n	8002084 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002066:	f7fe fd23 	bl	8000ab0 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d907      	bls.n	8002084 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e15c      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
 8002078:	40023800 	.word	0x40023800
 800207c:	42470000 	.word	0x42470000
 8002080:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	4b8a      	ldr	r3, [pc, #552]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 8002086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ea      	bne.n	8002066 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 8097 	beq.w	80021cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a2:	4b83      	ldr	r3, [pc, #524]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10f      	bne.n	80020ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	4b7f      	ldr	r3, [pc, #508]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a7e      	ldr	r2, [pc, #504]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b7c      	ldr	r3, [pc, #496]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ce:	4b79      	ldr	r3, [pc, #484]	; (80022b4 <HAL_RCC_OscConfig+0x4b0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d118      	bne.n	800210c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020da:	4b76      	ldr	r3, [pc, #472]	; (80022b4 <HAL_RCC_OscConfig+0x4b0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a75      	ldr	r2, [pc, #468]	; (80022b4 <HAL_RCC_OscConfig+0x4b0>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e6:	f7fe fce3 	bl	8000ab0 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ee:	f7fe fcdf 	bl	8000ab0 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e118      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	4b6c      	ldr	r3, [pc, #432]	; (80022b4 <HAL_RCC_OscConfig+0x4b0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x31e>
 8002114:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6713      	str	r3, [r2, #112]	; 0x70
 8002120:	e01c      	b.n	800215c <HAL_RCC_OscConfig+0x358>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b05      	cmp	r3, #5
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x340>
 800212a:	4b61      	ldr	r3, [pc, #388]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	4a60      	ldr	r2, [pc, #384]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6713      	str	r3, [r2, #112]	; 0x70
 8002136:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	4a5d      	ldr	r2, [pc, #372]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6713      	str	r3, [r2, #112]	; 0x70
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0x358>
 8002144:	4b5a      	ldr	r3, [pc, #360]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a59      	ldr	r2, [pc, #356]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a56      	ldr	r2, [pc, #344]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d015      	beq.n	8002190 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7fe fca4 	bl	8000ab0 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7fe fca0 	bl	8000ab0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0d7      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0ee      	beq.n	800216c <HAL_RCC_OscConfig+0x368>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7fe fc8e 	bl	8000ab0 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe fc8a 	bl	8000ab0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0c1      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ae:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1ee      	bne.n	8002198 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d105      	bne.n	80021cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c0:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 80021c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80ad 	beq.w	8002330 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d060      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d145      	bne.n	8002276 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <HAL_RCC_OscConfig+0x4b4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe fc5e 	bl	8000ab0 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f8:	f7fe fc5a 	bl	8000ab0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e093      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	019b      	lsls	r3, r3, #6
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	3b01      	subs	r3, #1
 8002230:	041b      	lsls	r3, r3, #16
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	061b      	lsls	r3, r3, #24
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	071b      	lsls	r3, r3, #28
 8002242:	491b      	ldr	r1, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x4b4>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7fe fc2f 	bl	8000ab0 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fc2b 	bl	8000ab0 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e064      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x452>
 8002274:	e05c      	b.n	8002330 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_RCC_OscConfig+0x4b4>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fc18 	bl	8000ab0 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fc14 	bl	8000ab0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e04d      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_OscConfig+0x4ac>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x480>
 80022a2:	e045      	b.n	8002330 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e040      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000
 80022b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HAL_RCC_OscConfig+0x538>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d030      	beq.n	800232c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d129      	bne.n	800232c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d122      	bne.n	800232c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d119      	bne.n	800232c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	3b01      	subs	r3, #1
 8002306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d10f      	bne.n	800232c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e042      	b.n	80023d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fa34 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2224      	movs	r2, #36	; 0x24
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f9e9 	bl	800275c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d156      	bne.n	80024a8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_UART_Transmit_DMA+0x26>
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e04f      	b.n	80024aa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	88fa      	ldrh	r2, [r7, #6]
 8002414:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	88fa      	ldrh	r2, [r7, #6]
 800241a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2221      	movs	r2, #33	; 0x21
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <HAL_UART_Transmit_DMA+0xd4>)
 8002430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	4a20      	ldr	r2, [pc, #128]	; (80024b8 <HAL_UART_Transmit_DMA+0xd8>)
 8002438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <HAL_UART_Transmit_DMA+0xdc>)
 8002440:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	2200      	movs	r2, #0
 8002448:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3304      	adds	r3, #4
 800245e:	461a      	mov	r2, r3
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	f7fe fcf1 	bl	8000e48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800246e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3314      	adds	r3, #20
 8002476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	e853 3f00 	ldrex	r3, [r3]
 800247e:	617b      	str	r3, [r7, #20]
   return(result);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3314      	adds	r3, #20
 800248e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002490:	627a      	str	r2, [r7, #36]	; 0x24
 8002492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002494:	6a39      	ldr	r1, [r7, #32]
 8002496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002498:	e841 2300 	strex	r3, r2, [r1]
 800249c:	61fb      	str	r3, [r7, #28]
   return(result);
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e5      	bne.n	8002470 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	080024fd 	.word	0x080024fd
 80024b8:	08002597 	.word	0x08002597
 80024bc:	080025b3 	.word	0x080025b3

080024c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b090      	sub	sp, #64	; 0x40
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d137      	bne.n	8002588 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251a:	2200      	movs	r2, #0
 800251c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800251e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3314      	adds	r3, #20
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	e853 3f00 	ldrex	r3, [r3]
 800252c:	623b      	str	r3, [r7, #32]
   return(result);
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002534:	63bb      	str	r3, [r7, #56]	; 0x38
 8002536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3314      	adds	r3, #20
 800253c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800253e:	633a      	str	r2, [r7, #48]	; 0x30
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e5      	bne.n	800251e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	330c      	adds	r3, #12
 8002558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	e853 3f00 	ldrex	r3, [r3]
 8002560:	60fb      	str	r3, [r7, #12]
   return(result);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
 800256a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002572:	61fa      	str	r2, [r7, #28]
 8002574:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	e841 2300 	strex	r3, r2, [r1]
 800257e:	617b      	str	r3, [r7, #20]
   return(result);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1e5      	bne.n	8002552 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002586:	e002      	b.n	800258e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002588:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800258a:	f7ff ff99 	bl	80024c0 <HAL_UART_TxCpltCallback>
}
 800258e:	bf00      	nop
 8002590:	3740      	adds	r7, #64	; 0x40
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff ff95 	bl	80024d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b80      	cmp	r3, #128	; 0x80
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b21      	cmp	r3, #33	; 0x21
 80025e4:	d108      	bne.n	80025f8 <UART_DMAError+0x46>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2200      	movs	r2, #0
 80025f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80025f2:	68b8      	ldr	r0, [r7, #8]
 80025f4:	f000 f827 	bl	8002646 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	bf0c      	ite	eq
 8002606:	2301      	moveq	r3, #1
 8002608:	2300      	movne	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b22      	cmp	r3, #34	; 0x22
 8002618:	d108      	bne.n	800262c <UART_DMAError+0x7a>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002626:	68b8      	ldr	r0, [r7, #8]
 8002628:	f000 f835 	bl	8002696 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f043 0210 	orr.w	r2, r3, #16
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002638:	68b8      	ldr	r0, [r7, #8]
 800263a:	f7ff ff55 	bl	80024e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002646:	b480      	push	{r7}
 8002648:	b089      	sub	sp, #36	; 0x24
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	330c      	adds	r3, #12
 8002654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	e853 3f00 	ldrex	r3, [r3]
 800265c:	60bb      	str	r3, [r7, #8]
   return(result);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	61ba      	str	r2, [r7, #24]
 8002670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002672:	6979      	ldr	r1, [r7, #20]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	e841 2300 	strex	r3, r2, [r1]
 800267a:	613b      	str	r3, [r7, #16]
   return(result);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e5      	bne.n	800264e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800268a:	bf00      	nop
 800268c:	3724      	adds	r7, #36	; 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002696:	b480      	push	{r7}
 8002698:	b095      	sub	sp, #84	; 0x54
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	330c      	adds	r3, #12
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a8:	e853 3f00 	ldrex	r3, [r3]
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	330c      	adds	r3, #12
 80026bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026be:	643a      	str	r2, [r7, #64]	; 0x40
 80026c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026c6:	e841 2300 	strex	r3, r2, [r1]
 80026ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e5      	bne.n	800269e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3314      	adds	r3, #20
 80026d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	e853 3f00 	ldrex	r3, [r3]
 80026e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3314      	adds	r3, #20
 80026f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fa:	e841 2300 	strex	r3, r2, [r1]
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e5      	bne.n	80026d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	2b01      	cmp	r3, #1
 800270c:	d119      	bne.n	8002742 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	330c      	adds	r3, #12
 8002714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	e853 3f00 	ldrex	r3, [r3]
 800271c:	60bb      	str	r3, [r7, #8]
   return(result);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f023 0310 	bic.w	r3, r3, #16
 8002724:	647b      	str	r3, [r7, #68]	; 0x44
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	330c      	adds	r3, #12
 800272c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800272e:	61ba      	str	r2, [r7, #24]
 8002730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002732:	6979      	ldr	r1, [r7, #20]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	e841 2300 	strex	r3, r2, [r1]
 800273a:	613b      	str	r3, [r7, #16]
   return(result);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1e5      	bne.n	800270e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002750:	bf00      	nop
 8002752:	3754      	adds	r7, #84	; 0x54
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800275c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002760:	b0c0      	sub	sp, #256	; 0x100
 8002762:	af00      	add	r7, sp, #0
 8002764:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002778:	68d9      	ldr	r1, [r3, #12]
 800277a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	ea40 0301 	orr.w	r3, r0, r1
 8002784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	431a      	orrs	r2, r3
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	431a      	orrs	r2, r3
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027b4:	f021 010c 	bic.w	r1, r1, #12
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027c2:	430b      	orrs	r3, r1
 80027c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d6:	6999      	ldr	r1, [r3, #24]
 80027d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	ea40 0301 	orr.w	r3, r0, r1
 80027e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4b8f      	ldr	r3, [pc, #572]	; (8002a28 <UART_SetConfig+0x2cc>)
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d005      	beq.n	80027fc <UART_SetConfig+0xa0>
 80027f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	4b8d      	ldr	r3, [pc, #564]	; (8002a2c <UART_SetConfig+0x2d0>)
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d104      	bne.n	8002806 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027fc:	f7ff f8be 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8002800:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002804:	e003      	b.n	800280e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002806:	f7ff f8a5 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 800280a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002818:	f040 810c 	bne.w	8002a34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800281c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002820:	2200      	movs	r2, #0
 8002822:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002826:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800282a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800282e:	4622      	mov	r2, r4
 8002830:	462b      	mov	r3, r5
 8002832:	1891      	adds	r1, r2, r2
 8002834:	65b9      	str	r1, [r7, #88]	; 0x58
 8002836:	415b      	adcs	r3, r3
 8002838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800283a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800283e:	4621      	mov	r1, r4
 8002840:	eb12 0801 	adds.w	r8, r2, r1
 8002844:	4629      	mov	r1, r5
 8002846:	eb43 0901 	adc.w	r9, r3, r1
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800285a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800285e:	4690      	mov	r8, r2
 8002860:	4699      	mov	r9, r3
 8002862:	4623      	mov	r3, r4
 8002864:	eb18 0303 	adds.w	r3, r8, r3
 8002868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800286c:	462b      	mov	r3, r5
 800286e:	eb49 0303 	adc.w	r3, r9, r3
 8002872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002882:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800288a:	460b      	mov	r3, r1
 800288c:	18db      	adds	r3, r3, r3
 800288e:	653b      	str	r3, [r7, #80]	; 0x50
 8002890:	4613      	mov	r3, r2
 8002892:	eb42 0303 	adc.w	r3, r2, r3
 8002896:	657b      	str	r3, [r7, #84]	; 0x54
 8002898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800289c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028a0:	f7fd fcb0 	bl	8000204 <__aeabi_uldivmod>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4b61      	ldr	r3, [pc, #388]	; (8002a30 <UART_SetConfig+0x2d4>)
 80028aa:	fba3 2302 	umull	r2, r3, r3, r2
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	011c      	lsls	r4, r3, #4
 80028b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028c4:	4642      	mov	r2, r8
 80028c6:	464b      	mov	r3, r9
 80028c8:	1891      	adds	r1, r2, r2
 80028ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80028cc:	415b      	adcs	r3, r3
 80028ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028d4:	4641      	mov	r1, r8
 80028d6:	eb12 0a01 	adds.w	sl, r2, r1
 80028da:	4649      	mov	r1, r9
 80028dc:	eb43 0b01 	adc.w	fp, r3, r1
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028f4:	4692      	mov	sl, r2
 80028f6:	469b      	mov	fp, r3
 80028f8:	4643      	mov	r3, r8
 80028fa:	eb1a 0303 	adds.w	r3, sl, r3
 80028fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002902:	464b      	mov	r3, r9
 8002904:	eb4b 0303 	adc.w	r3, fp, r3
 8002908:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002918:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800291c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002920:	460b      	mov	r3, r1
 8002922:	18db      	adds	r3, r3, r3
 8002924:	643b      	str	r3, [r7, #64]	; 0x40
 8002926:	4613      	mov	r3, r2
 8002928:	eb42 0303 	adc.w	r3, r2, r3
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
 800292e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002936:	f7fd fc65 	bl	8000204 <__aeabi_uldivmod>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4611      	mov	r1, r2
 8002940:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <UART_SetConfig+0x2d4>)
 8002942:	fba3 2301 	umull	r2, r3, r3, r1
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2264      	movs	r2, #100	; 0x64
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	1acb      	subs	r3, r1, r3
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002956:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <UART_SetConfig+0x2d4>)
 8002958:	fba3 2302 	umull	r2, r3, r3, r2
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002964:	441c      	add	r4, r3
 8002966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800296a:	2200      	movs	r2, #0
 800296c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002970:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	1891      	adds	r1, r2, r2
 800297e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002980:	415b      	adcs	r3, r3
 8002982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002988:	4641      	mov	r1, r8
 800298a:	1851      	adds	r1, r2, r1
 800298c:	6339      	str	r1, [r7, #48]	; 0x30
 800298e:	4649      	mov	r1, r9
 8002990:	414b      	adcs	r3, r1
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029a0:	4659      	mov	r1, fp
 80029a2:	00cb      	lsls	r3, r1, #3
 80029a4:	4651      	mov	r1, sl
 80029a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029aa:	4651      	mov	r1, sl
 80029ac:	00ca      	lsls	r2, r1, #3
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	4642      	mov	r2, r8
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029bc:	464b      	mov	r3, r9
 80029be:	460a      	mov	r2, r1
 80029c0:	eb42 0303 	adc.w	r3, r2, r3
 80029c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80029d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80029dc:	460b      	mov	r3, r1
 80029de:	18db      	adds	r3, r3, r3
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e2:	4613      	mov	r3, r2
 80029e4:	eb42 0303 	adc.w	r3, r2, r3
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029f2:	f7fd fc07 	bl	8000204 <__aeabi_uldivmod>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <UART_SetConfig+0x2d4>)
 80029fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	2164      	movs	r1, #100	; 0x64
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	3332      	adds	r3, #50	; 0x32
 8002a0e:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <UART_SetConfig+0x2d4>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	f003 0207 	and.w	r2, r3, #7
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4422      	add	r2, r4
 8002a22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a24:	e106      	b.n	8002c34 <UART_SetConfig+0x4d8>
 8002a26:	bf00      	nop
 8002a28:	40011000 	.word	0x40011000
 8002a2c:	40011400 	.word	0x40011400
 8002a30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a46:	4642      	mov	r2, r8
 8002a48:	464b      	mov	r3, r9
 8002a4a:	1891      	adds	r1, r2, r2
 8002a4c:	6239      	str	r1, [r7, #32]
 8002a4e:	415b      	adcs	r3, r3
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a56:	4641      	mov	r1, r8
 8002a58:	1854      	adds	r4, r2, r1
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	eb43 0501 	adc.w	r5, r3, r1
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	00eb      	lsls	r3, r5, #3
 8002a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a6e:	00e2      	lsls	r2, r4, #3
 8002a70:	4614      	mov	r4, r2
 8002a72:	461d      	mov	r5, r3
 8002a74:	4643      	mov	r3, r8
 8002a76:	18e3      	adds	r3, r4, r3
 8002a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a7c:	464b      	mov	r3, r9
 8002a7e:	eb45 0303 	adc.w	r3, r5, r3
 8002a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	008b      	lsls	r3, r1, #2
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aac:	4621      	mov	r1, r4
 8002aae:	008a      	lsls	r2, r1, #2
 8002ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ab4:	f7fd fba6 	bl	8000204 <__aeabi_uldivmod>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4b60      	ldr	r3, [pc, #384]	; (8002c40 <UART_SetConfig+0x4e4>)
 8002abe:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	011c      	lsls	r4, r3, #4
 8002ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ad0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	1891      	adds	r1, r2, r2
 8002ade:	61b9      	str	r1, [r7, #24]
 8002ae0:	415b      	adcs	r3, r3
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae8:	4641      	mov	r1, r8
 8002aea:	1851      	adds	r1, r2, r1
 8002aec:	6139      	str	r1, [r7, #16]
 8002aee:	4649      	mov	r1, r9
 8002af0:	414b      	adcs	r3, r1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b00:	4659      	mov	r1, fp
 8002b02:	00cb      	lsls	r3, r1, #3
 8002b04:	4651      	mov	r1, sl
 8002b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	00ca      	lsls	r2, r1, #3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	4642      	mov	r2, r8
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b1c:	464b      	mov	r3, r9
 8002b1e:	460a      	mov	r2, r1
 8002b20:	eb42 0303 	adc.w	r3, r2, r3
 8002b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b40:	4649      	mov	r1, r9
 8002b42:	008b      	lsls	r3, r1, #2
 8002b44:	4641      	mov	r1, r8
 8002b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	008a      	lsls	r2, r1, #2
 8002b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b52:	f7fd fb57 	bl	8000204 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <UART_SetConfig+0x4e4>)
 8002b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2264      	movs	r2, #100	; 0x64
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	1acb      	subs	r3, r1, r3
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	3332      	adds	r3, #50	; 0x32
 8002b70:	4a33      	ldr	r2, [pc, #204]	; (8002c40 <UART_SetConfig+0x4e4>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7c:	441c      	add	r4, r3
 8002b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b82:	2200      	movs	r2, #0
 8002b84:	673b      	str	r3, [r7, #112]	; 0x70
 8002b86:	677a      	str	r2, [r7, #116]	; 0x74
 8002b88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b8c:	4642      	mov	r2, r8
 8002b8e:	464b      	mov	r3, r9
 8002b90:	1891      	adds	r1, r2, r2
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	415b      	adcs	r3, r3
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	1851      	adds	r1, r2, r1
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	4649      	mov	r1, r9
 8002ba4:	414b      	adcs	r3, r1
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	00cb      	lsls	r3, r1, #3
 8002bb8:	4651      	mov	r1, sl
 8002bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	00ca      	lsls	r2, r1, #3
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4642      	mov	r2, r8
 8002bca:	189b      	adds	r3, r3, r2
 8002bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bce:	464b      	mov	r3, r9
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	eb42 0303 	adc.w	r3, r2, r3
 8002bd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	663b      	str	r3, [r7, #96]	; 0x60
 8002be2:	667a      	str	r2, [r7, #100]	; 0x64
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002bf0:	4649      	mov	r1, r9
 8002bf2:	008b      	lsls	r3, r1, #2
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bfa:	4641      	mov	r1, r8
 8002bfc:	008a      	lsls	r2, r1, #2
 8002bfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c02:	f7fd faff 	bl	8000204 <__aeabi_uldivmod>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <UART_SetConfig+0x4e4>)
 8002c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	2164      	movs	r1, #100	; 0x64
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	3332      	adds	r3, #50	; 0x32
 8002c1e:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <UART_SetConfig+0x4e4>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	f003 020f 	and.w	r2, r3, #15
 8002c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4422      	add	r2, r4
 8002c32:	609a      	str	r2, [r3, #8]
}
 8002c34:	bf00      	nop
 8002c36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c40:	51eb851f 	.word	0x51eb851f

08002c44 <memset>:
 8002c44:	4402      	add	r2, r0
 8002c46:	4603      	mov	r3, r0
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d100      	bne.n	8002c4e <memset+0xa>
 8002c4c:	4770      	bx	lr
 8002c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c52:	e7f9      	b.n	8002c48 <memset+0x4>

08002c54 <__libc_init_array>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	4d0d      	ldr	r5, [pc, #52]	; (8002c8c <__libc_init_array+0x38>)
 8002c58:	4c0d      	ldr	r4, [pc, #52]	; (8002c90 <__libc_init_array+0x3c>)
 8002c5a:	1b64      	subs	r4, r4, r5
 8002c5c:	10a4      	asrs	r4, r4, #2
 8002c5e:	2600      	movs	r6, #0
 8002c60:	42a6      	cmp	r6, r4
 8002c62:	d109      	bne.n	8002c78 <__libc_init_array+0x24>
 8002c64:	4d0b      	ldr	r5, [pc, #44]	; (8002c94 <__libc_init_array+0x40>)
 8002c66:	4c0c      	ldr	r4, [pc, #48]	; (8002c98 <__libc_init_array+0x44>)
 8002c68:	f000 f818 	bl	8002c9c <_init>
 8002c6c:	1b64      	subs	r4, r4, r5
 8002c6e:	10a4      	asrs	r4, r4, #2
 8002c70:	2600      	movs	r6, #0
 8002c72:	42a6      	cmp	r6, r4
 8002c74:	d105      	bne.n	8002c82 <__libc_init_array+0x2e>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7c:	4798      	blx	r3
 8002c7e:	3601      	adds	r6, #1
 8002c80:	e7ee      	b.n	8002c60 <__libc_init_array+0xc>
 8002c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c86:	4798      	blx	r3
 8002c88:	3601      	adds	r6, #1
 8002c8a:	e7f2      	b.n	8002c72 <__libc_init_array+0x1e>
 8002c8c:	08002cdc 	.word	0x08002cdc
 8002c90:	08002cdc 	.word	0x08002cdc
 8002c94:	08002cdc 	.word	0x08002cdc
 8002c98:	08002ce0 	.word	0x08002ce0

08002c9c <_init>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	bf00      	nop
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr

08002ca8 <_fini>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	bf00      	nop
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr
